{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductsService = /*#__PURE__*/(() => {\n  class ProductsService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://2872714c-427f-45d7-86a5-48cfb2ec630d-00-1poko749ejplg.janeway.replit.dev/admin/products';\n      this.addProductUrl = 'https://2872714c-427f-45d7-86a5-48cfb2ec630d-00-1poko749ejplg.janeway.replit.dev/admin/add-product';\n      this.getproducturl = 'https://2872714c-427f-45d7-86a5-48cfb2ec630d-00-1poko749ejplg.janeway.replit.dev/admin/get_product';\n    }\n\n    sendTestPost() {\n      const formData = new FormData();\n      formData.append('test', 'value');\n      this.http.post('/admin/hello', formData).subscribe({\n        next: res => console.log('Succès', res),\n        error: err => console.error('Erreur', err)\n      });\n    }\n\n    getProducts() {\n      const headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Content-Type': 'application/json'\n      };\n      return this.http.get(this.apiUrl, {\n        headers\n      }).pipe(map(products => {\n        // Transform the data to match our interface\n        return products.map(product => Object.assign(Object.assign({}, product), {\n          price: product.price,\n          price2: product.price2,\n          avalaible: product.avalaible,\n          qtt_stock: product.qtt_stock\n        }));\n      }), catchError(error => {\n        var _a;\n\n        console.error('API Error:', error); // Try to get more detailed error information\n\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.statusText || 'Erreur lors du chargement des produits';\n        throw new Error(errorMessage);\n      }));\n    }\n\n    getProduct(productId) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Les en-têtes 'Access-Control-Allow-*' ne sont pas à définir côté client\n\n      });\n      const url = `admin/products/${productId}`;\n      return this.http.get(url, {\n        headers\n      }).pipe(map(product => Object.assign(Object.assign({}, product), {\n        price: product.price,\n        price2: product.price2,\n        avalaible: product.avalaible,\n        qtt_stock: product.qtt_stock\n      })), catchError(error => {\n        var _a;\n\n        console.error('API Error:', error);\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.statusText || 'Erreur lors du chargement du produit';\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n\n    deleteProduct(productId) {\n      const headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Content-Type': 'application/json'\n      };\n      return this.http.delete(`${this.apiUrl}/${productId}`, {\n        headers\n      }).pipe(catchError(error => {\n        var _a;\n\n        console.error('API Error:', error);\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.statusText || 'Erreur lors de la suppression du produit';\n        throw new Error(errorMessage);\n      }));\n    }\n\n    addProduct(product, imageFile) {\n      const formData = new FormData();\n      formData.append('name', product.name);\n      formData.append('price', product.price.toString());\n\n      if (product.price2 !== undefined && product.price2 !== null) {\n        formData.append('price2', product.price2.toString());\n      }\n\n      formData.append('avalaible', product.avalaible ? 'true' : 'false');\n      formData.append('qtt_stock', product.qtt_stock.toString());\n      formData.append('image', imageFile);\n      return this.http.post(this.addProductUrl, formData).pipe(catchError(error => {\n        var _a;\n\n        console.error('API Error:', error);\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.statusText || 'Erreur lors de l\\'ajout du produit';\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n\n    updateProduct(productId, formData) {\n      return this.http.put(`${this.addProductUrl}/${productId}`, formData).pipe(catchError(error => {\n        var _a;\n\n        console.error('API Error:', error);\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.statusText || 'Erreur lors de la mise à jour du produit';\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n\n  }\n\n  ProductsService.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductsService;\n})();","map":null,"metadata":{},"sourceType":"module"}